#include <iostream>
using namespace std;
 
int ** a; // Матрица смежности будет записана именно сюда.
int n = 51; // Число вершин. 
int * was;// Массив цвета вершины.
 
bool dfs(int key){
  //"Красим" вершину в серый цвет (указываем, что мы в нее вошли).
  was[key] = 1;
  //Проходим все связанные с текущей вершиной.
  for(int i = 0; i < n; i++){
  //Если значение элемента строки матрицы (по условию, нам дана матрица смежности) отлично от "0", то:
    if(a[key][i]){
      //если вершина "белая" (т. е. мы в неё еще не заходили) - запускаем рекурсивный вызов DFS от этой вершины.
      if(was[i] == 0) {if(dfs(i)) return true;}
      //если вершина "серая" (мы её уже навещали, но не возвращались из ее потомков)-  
      //мы нашли цикл, следовательно поиск можно завершить.
      else if(was[i] == 1) { return true;}
    }
  }
  //Если ни один из if - ов не сработал, то "красим" вершину в черный цвет (отмечаем, как пройденную)
  was[key] = 2;
  //и возвращаем результат поиска (мы ничего не нашли).
  return false;
}

int main() {
  cin >> n; a = new int *[n]; was = new int [n];
  for(int i = 0; i < n; i++){
    a[i] = new int [n]; was[i] = 0;
    for(int j = 0; j < n; j++) cin >> a[i][j];
  }
  for(int i = 0; i < n; i++){
    //Проверяем поиском каждую вершину. Если поиск оказался успешным - выводим "1". 
    //Проверка цвета сделана ради ускорения процесса, иначе в поиске пришлось бы проходить весь 
    //цикл, даже если вершина покрашена в черный цвет.
    if(!was[i]&&dfs(i)) {cout << "1\n"; return 0;}
  }
  //Если if ни разу не сработал - выводим "0".
  cout << "0\n";
  return 0;
}
